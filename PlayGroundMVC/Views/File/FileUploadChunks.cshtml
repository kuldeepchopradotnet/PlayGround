@*this is how to use model in view*@
@model PlayGroundMVC.Models.FileModel
@{
    ViewBag.Title = "File Upload";
}
ASP MVC and changing url of posted form
<h2>
    Index
    @if (ViewBag.Message != null)
    {
        @ViewBag.Message;
    }
</h2>

@*create a form using razor syntax*@
 encType="multipart/form-data"
No characters are encoded. This value is required when you are using forms that have a file upload control
html attribute to all multifile upload
@using (Html.BeginForm("FileUploadChunks", "File", FormMethod.Post, new { encType = "multipart/form-data", @id = "formId" }))
{
    @Html.TextBoxFor(m => m.FileName);
    @Html.TextBoxFor(m => m.Files, new { @Type = "file", @Name = "File", @multiple = "multiple" });
    //Html.TextBoxFor(m => m.File, new { @Type = "file" });
    <input type="submit" value="Upload" id="submitId">
}
use of section Scripts
and render this in layout see layout
RenderSection("scripts", required: false)
@section Scripts{
    <script>
        // fileStore to manage all multiple files / uploaded
        var fileStore = {
            fileObj: []
        }
        $("form#formId").submit(function (event) {
            debugger;
            //all validation can be put here of jquery
            //send ajax call to server
            //get all files
            var files = $("#Files").get(0).files;
            // loop through files
            for (i = 0; i < files.length; i++) {
                // create chucks of file and then send single chucks to upload
                //var fileArr = [];
                var fileName = files[i].name;
                var chunkArr = [];
                var chunksize = 102400
                var postion = 0;
                var endPostion = chunksize;
                while (postion < files[i].size) {
                    chunkArr.push(files[i].slice(postion, endPostion));
                    postion = endPostion;
                    endPostion = postion + chunksize;
                }
                // push to filestore
                fileStore.fileObj.push(
                    {
                        fileArr: chunkArr,
                        fileName: fileName,
                    }
                )
                //clear the chuncks
                chunkArr = [];
               // console.log(fileArr);
               // uploadFile(fileArr,1,fileName);
                ///var totalFiles = fileStore.fileObj.length;
            }
            
            uploadFile(fileStore, 1);
            //prevent the action
            event.preventDefault();
        });

        // Resursive method that will be called when response will get form api or server
        function uploadFile(fileStore, fileIdx) {
            uploadFileChunk(fileStore, 1, fileIdx)
        }
        function uploadFileChunk(fileStore, index, fileIdx) {
            var formData = new FormData();
            var chunkArr = fileStore.fileObj[fileIdx - 1].fileArr;
            var fileName = fileStore.fileObj[fileIdx - 1].fileName;
            formData.append("file", chunkArr[index-1], fileName);
            $.ajax({
                url: "/File/FileUploadChunks",
                data: formData,
                type: "Post",
                contentType: false,
                processData: false,
                success: function (data) {
                    if (chunkArr.length === index) {
                        if (fileStore.fileObj.length === fileIdx) {
                            alert("all file uploaded")
                        }
                        else {
                            uploadFile(fileStore, (fileIdx + 1))
                        }
                        alert("file chunk uploaded ");
                    }
                    else {
                        uploadFileChunk(fileStore, (index + 1), fileIdx)
                    }
                },
                error: function (err) { }
            });

        }
    </script>
}
